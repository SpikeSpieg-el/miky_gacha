// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
function showFeedback(message) {
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  const feedback = document.createElement('div');
  feedback.className = 'card-added-feedback';
  feedback.textContent = message;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  document.body.appendChild(feedback);
  
  // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
  setTimeout(() => {
    feedback.remove();
  }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑–∞
}

// –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
function showHome() {
    hideAllSections();
    document.getElementById('homeContent').style.display = 'block';
    setActiveButton('showHome');
  }
  
  function showGachaSystem() {
    hideAllSections();
    document.getElementById('gachaSystem').style.display = 'block';
    setActiveButton('showGachaSystem');
  }
  
  function showCollection() {
    hideAllSections();
    document.getElementById('cardCollection').style.display = 'block';
    updateCollection();
  }
  
  function showTycoon() {
    hideAllSections();
    document.getElementById('tycoonMode').style.display = 'block';
    setActiveButton('showTycoon');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–∫—É–Ω-—Å–∏—Å—Ç–µ–º—É, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–∫–∞–∑
    initTycoonSystem();
  }
  
  function showNews() {
    hideAllSections();
    document.getElementById('newsSection').style.display = 'block';
    renderNews(sampleNewsData, 'dynamicNewsContainer');
  }
  
  function showShop() {
    hideAllSections();
    document.getElementById('shopSection').style.display = 'block';
  }
  
  function showEvents() {
    hideAllSections();
    document.getElementById('eventsSection').style.display = 'block';
    renderEvents(sampleEventsData, 'dynamicEventsContainer');
  }
  
  function showProfile() {
    hideAllSections();
    document.getElementById('profileSection').style.display = 'block';
  }
  
  function hideAllSections() {
    const sections = [
      'homeContent', 'gachaSystem', 'cardCollection', 'tycoonMode', 
      'newsSection', 'shopSection', 'eventsSection', 'profileSection'
    ];
    sections.forEach(section => {
      document.getElementById(section).style.display = 'none';
    });
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
  function toggleMenu() {
    const menu = document.getElementById('sideMenu');
    const isActive = menu.classList.contains('active');
    
    if (!isActive) { // Menu is about to open
      menu.classList.add('active');
      const navLinks = menu.querySelectorAll('.nav-link');
      navLinks.forEach((link, index) => {
        link.style.animationDelay = `${index * 0.07}s`; // Stagger delay
      });
    } else { // Menu is about to close
      menu.classList.remove('active');
      // Optional: Remove animation delays if they cause issues, though CSS animation should reset
      const navLinks = menu.querySelectorAll('.nav-link');
      navLinks.forEach(link => {
        link.style.animationDelay = ''; // Reset delay
      });
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
  function setActiveButton(buttonId) {
    const buttons = document.querySelectorAll('#sideMenu .nav-link');
    buttons.forEach(button => button.classList.remove('active')); // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    const activeButton = document.querySelector(`#sideMenu .nav-link[onclick*="${buttonId}"]`);
    if (activeButton) {
      activeButton.classList.add('active'); // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ
    }
  }
  
  // =======================================
  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–π–∫—É–Ω-—Å–∏—Å—Ç–µ–º–∞
  // =======================================

  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–∫—É–Ω-—Å–∏—Å—Ç–µ–º–æ–π
  let studioLevel = 1;
  let studioIncome = 100;
  let totalFans = 0;
  let totalGems = 1000;
  let totalConcerts = 0;
  let studioRank = 'D';
  let studioExp = 0;
  let studioMaxExp = 1000;
  let currentTeam = [];
  let maxTeamSize = 3;
  let songs = [];
  let dailyTasks = {
    completeConcert: false,
    composeSong: false,
    gainFans: false
  };

  // –ë–æ–Ω—É—Å—ã –∫–æ–º–∞–Ω–¥—ã
  let teamBonuses = {
    fanGain: 0,
    songQuality: 0,
    performance: 0
  };

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
  let teamModalInstance = null;

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω—Ü–µ—Ä—Ç–∞
  let concertResultModalInstance = null;

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  let selectedCardData = null; // –ó–∞–º–µ–Ω—è–µ–º selectedCardIndex
  let selectedSlotIndex = -1;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–∫—É–Ω-—Å–∏—Å—Ç–µ–º—ã
  function initTycoonSystem() {
    updateStudioExp();
    updateTycoonStats();
    updateTeamDisplay();
    updateActivityLog('Welcome to your new Studio!', 'Start by adding team members and creating songs');
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—É–¥–∏–∏
  function updateTycoonStats() {
    document.getElementById('studioLevel').textContent = studioLevel;
    document.getElementById('studioIncome').textContent = studioIncome;
    document.getElementById('totalFans').textContent = totalFans;
    document.getElementById('totalGems').textContent = totalGems;
    document.getElementById('totalConcerts').textContent = totalConcerts;
    document.getElementById('studioRank').textContent = studioRank;
    document.getElementById('currentStaff').textContent = currentTeam.length;
    document.getElementById('maxStaff').textContent = maxTeamSize;
    document.getElementById('songCount').textContent = songs.length;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã –∫–æ–º–∞–Ω–¥—ã
    document.getElementById('fanBonus').textContent = `+${teamBonuses.fanGain}%`;
    document.getElementById('songBonus').textContent = `+${teamBonuses.songQuality}%`;
    document.getElementById('perfBonus').textContent = `+${teamBonuses.performance}%`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    document.getElementById('profileRank').textContent = studioRank;
    document.getElementById('profileTotalCards').textContent = collection.length;
    document.getElementById('profileGems').textContent = totalGems;
    document.getElementById('profileConcerts').textContent = totalConcerts;
    document.getElementById('profileFans').textContent = totalFans;
    document.getElementById('profileStudioLevel').textContent = studioLevel;
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—ã—Å—à—É—é —Ä–µ–¥–∫–æ—Å—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    let highestRarity = 0;
    collection.forEach(char => {
      if (char.rarity > highestRarity) {
        highestRarity = char.rarity;
      }
    });
    document.getElementById('profileHighestRarity').textContent = highestRarity + '‚òÖ';
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ —Å—Ç—É–¥–∏–∏
  function updateStudioExp() {
    const expBar = document.getElementById('studioExpBar');
    const expText = document.getElementById('studioExpText');
    
    const expPercentage = (studioExp / studioMaxExp) * 100;
    expBar.style.width = `${expPercentage}%`;
    expText.textContent = `Exp: ${studioExp}/${studioMaxExp}`;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞ —Å—Ç—É–¥–∏–∏
  function addStudioExp(amount) {
    studioExp += amount;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    if (studioExp >= studioMaxExp) {
      studioLevel += 1;
      const remainingExp = studioExp - studioMaxExp;
      studioExp = remainingExp;
      studioMaxExp = Math.floor(studioMaxExp * 1.5); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ—Ö–æ–¥
      studioIncome = studioLevel * 100;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
      if (studioLevel % 3 === 0) {
        maxTeamSize += 1;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
      alert(`Studio Level Up! You are now level ${studioLevel}!`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
      updateActivityLog(`Studio Level Up!`, `Your studio is now level ${studioLevel}`);
    }
    
    updateStudioExp();
    updateTycoonStats();
  }

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ —Å—Ç—É–¥–∏–∏
  function updateStudioRank() {
    if (totalFans >= 20000) {
      studioRank = 'S';
    } else if (totalFans >= 10000) {
      studioRank = 'A';
    } else if (totalFans >= 5000) {
      studioRank = 'B';
    } else if (totalFans >= 2000) {
      studioRank = 'C';
    } else {
      studioRank = 'D';
    }
    
    updateTycoonStats();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞ —Å—Ç—É–¥–∏–∏
  function upgradeStudio() {
    const upgradeCost = 500 * studioLevel;
    
    if (totalGems >= upgradeCost) {
      totalGems -= upgradeCost;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç —Å—Ç—É–¥–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
      addStudioExp(studioMaxExp); // –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—ã—Å–∏—Ç —É—Ä–æ–≤–µ–Ω—å
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
      updateActivityLog(`Studio Upgraded`, `Your studio is now level ${studioLevel}`);
    } else {
      alert(`Not enough gems! You need ${upgradeCost}üíé, but you have ${totalGems}üíé`);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã
  function updateTeamDisplay() {
    const teamMembers = document.getElementById('teamMembers');
    teamMembers.innerHTML = '';
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏—Ö —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    for (let i = 0; i < maxTeamSize; i++) {
      const teamSlot = document.createElement('div');
      teamSlot.className = 'card-thumbnail position-relative';
      
      if (i < currentTeam.length) {
        // –°–ª–æ—Ç –∑–∞–Ω—è—Ç
        const member = currentTeam[i];
        teamSlot.innerHTML = `
          <img src="${member.imgUrl || member.img}" alt="${member.name}" class="img-fluid">
          <div class="position-absolute bottom-0 start-0 end-0 p-1 bg-dark bg-opacity-75 text-center">
            <small>${member.rarity}‚òÖ</small>
          </div>
        `;
        teamSlot.setAttribute('data-index', i);
        teamSlot.onclick = () => removeTeamMember(i);
      } else {
        // –ü—É—Å—Ç–æ–π —Å–ª–æ—Ç
        teamSlot.classList.add('empty-slot');
        teamSlot.innerHTML = `
          <div class="position-absolute top-50 start-50 translate-middle text-center">
            <i class="fas fa-plus" style="font-size: 24px; color: rgba(255, 255, 255, 0.5);"></i>
          </div>
        `;
        teamSlot.onclick = showTeamManagement;
      }
      
      teamMembers.appendChild(teamSlot);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π
  function showTeamManagement() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    selectedCardData = null;
    selectedSlotIndex = -1;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    updateTeamModalContent();
    
    // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ backdrop —ç–ª–µ–º–µ–Ω—Ç—ã
    clearBackdrops();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const teamModalElement = document.getElementById('teamModal');
    teamModalInstance = new bootstrap.Modal(teamModalElement);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    teamModalElement.addEventListener('hidden.bs.modal', function () {
      clearBackdrops();
      calculateTeamBonuses();
      updateTeamDisplay();
    }, { once: true });
    
    teamModalInstance.show();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
  function updateCardSelectionList() {
    const cardSelection = document.getElementById('cardSelection');
    cardSelection.innerHTML = '';
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    let availableCards = [...collection].filter(card => 
        !currentTeam.some(member => 
            (member.id && member.id === card.id) || 
            (member.img && member.img === card.img) || 
            (member.imgUrl && member.imgUrl === (card.imgUrl || card.img))
        )
    );
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
    const cardFilterElement = document.getElementById('cardFilter');
    const sortType = cardFilterElement ? cardFilterElement.value : 'all';
    
    if (sortType !== 'all') {
        availableCards.sort((a, b) => {
            if (sortType === 'rarity') { return b.rarity - a.rarity; }
            else if (sortType === 'power') { return b.power - a.power; }
            else if (sortType === 'beauty') { return b.beauty - a.beauty; }
            else if (sortType === 'charisma') { return b.charisma - a.charisma; }
            else if (sortType === 'vocal') { return b.vocal - a.vocal; }
            return 0;
        });
    }
    
    if (availableCards.length === 0) {
      const placeholder = document.createElement('div');
      placeholder.className = 'card-placeholder';
      placeholder.textContent = 'No available cards';
      cardSelection.appendChild(placeholder);
    } else {
      availableCards.forEach((card, index) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ
        const isInTeam = currentTeam.some(member => 
          (member.id && member.id === card.id) || 
          (member.img && member.img === card.img) || 
          (member.imgUrl && member.imgUrl === (card.imgUrl || card.img))
        );
        
        if (!isInTeam) {
          const cardContainer = document.createElement('div');
          cardContainer.className = 'position-relative';
          
          const cardElement = document.createElement('img');
          cardElement.className = 'card-option img-fluid team-manager-img'; // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å team-manager-img
          cardElement.src = card.imgUrl || card.img;
          cardElement.alt = card.name;
          
          // –ï—Å–ª–∏ —ç—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—ã–±—Ä–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å selected
          if (selectedCardData && ((selectedCardData.id && selectedCardData.id === card.id) || selectedCardData.imgUrl === (card.imgUrl || card.img))) {
            cardElement.classList.add('selected');
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
          const tooltip = document.createElement('div');
          tooltip.className = 'tooltip-card';
          tooltip.innerHTML = `
            ${card.name} (${card.rarity}‚òÖ)<br>
            Power: ${card.power}<br>
            Beauty: ${card.beauty}<br>
            Charisma: ${card.charisma}<br>
            Vocal: ${card.vocal}
          `;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–π–¥–∂ —Å —Ä–µ–¥–∫–æ—Å—Ç—å—é
          const badge = document.createElement('div');
          badge.className = 'card-badge';
          badge.textContent = card.rarity;
          
          cardContainer.appendChild(cardElement);
          cardContainer.appendChild(tooltip);
          cardContainer.appendChild(badge);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
          cardElement.addEventListener('click', function() {
            // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            document.querySelectorAll('.card-option').forEach(el => {
              el.classList.remove('selected');
            });
            
            // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            this.classList.add('selected');
            selectedCardData = card; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã
            selectedSlotIndex = -1; 
            
            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–æ —Å–ª–æ—Ç–æ–≤
            document.querySelectorAll('.team-slot').forEach(slot => {
              slot.classList.remove('highlight', 'selected-slot');
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ—Ç
            showFeedback('–ö–∞—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å–ª–æ—Ç –≤ –∫–æ–º–∞–Ω–¥–µ.');
              
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
            highlightAvailableSlots();
          });
          
          cardSelection.appendChild(cardContainer);
        }
      });
    }
  }

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –í–°–ï–• —Å–ª–æ—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
  function highlightAvailableSlots() {
    const teamSlots = document.querySelectorAll('.team-slot');
    teamSlots.forEach((slot, index) => {
      if (index < maxTeamSize) { // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã
          slot.classList.add('highlight');
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–Ω—è—Ç–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          /*
          setTimeout(() => {
              if (selectedSlotIndex !== index) { // –ù–µ —É–±–∏—Ä–∞—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É, –µ—Å–ª–∏ —Å–ª–æ—Ç –≤—ã–±—Ä–∞–Ω
                  slot.classList.remove('highlight');
              }
          }, 3000); 
          */
      }
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
  function updateTeamModalContent() {
    const modalTeamSlots = document.getElementById('teamSlots');
    modalTeamSlots.innerHTML = '';
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    for (let i = 0; i < maxTeamSize; i++) {
      const teamSlot = document.createElement('div');
      teamSlot.className = 'team-slot mb-3 p-2 bg-dark rounded';
      teamSlot.setAttribute('data-slot', i);
      
      // ----- –ò–ó–ú–ï–ù–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –ö–õ–ò–ö–ê –ü–û –°–õ–û–¢–£ ----- 
      const handleSlotClick = function(slotIndex) {
          if (!selectedCardData) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–∞—Ä—Ç—ã
              showFeedback('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–ø—Ä–∞–≤–∞.');
              return; 
          }
          
          // –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —É–∂–µ –µ—Å—Ç—å –≤ selectedCardData
          // –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ availableCards –∏ –ø–æ–∏—Å–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É
          /*
          let availableCards = [...];
          const sortType = ...;
          if (sortType !== 'all') { ... }
          const selected_card_data = availableCards[selectedCardIndex];
          if (!selected_card_data) { ... }
          */

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ –∫–æ–º–∞–Ω–¥—É
          addCardToTeam(selectedCardData, slotIndex); // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã
      };
      // ----- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –õ–û–ì–ò–ö–ò –ö–õ–ò–ö–ê –ü–û –°–õ–û–¢–£ -----

      if (i < currentTeam.length) {
        // –°–ª–æ—Ç –∑–∞–Ω—è—Ç
        const member = currentTeam[i];
        teamSlot.innerHTML = `
          <div class="d-flex">
            <div class="card-thumbnail me-3 position-relative">
              <img src="${member.imgUrl || member.img}" alt="${member.name}" class="img-fluid team-manager-img"> 
              <div class="tooltip-card">
                ${member.name} (${member.rarity}‚òÖ)<br>
                P: ${member.power} | B: ${member.beauty}<br>
                C: ${member.charisma} | V: ${member.vocal}
              </div>
            </div>
            <div>
              <p class="mb-0">${member.name}</p>
              <small class="text-muted">Rarity: ${member.rarity}‚òÖ</small>
              <div class="mt-1">
                <button class="btn btn-sm btn-danger remove-member" data-index="${i}">Remove</button>
              </div>
            </div>
          </div>
        `;

        teamSlot.querySelector('.remove-member').addEventListener('click', (event) => {
          event.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π div
          if (confirm(`Remove ${member.name} from your team?`)) {
            currentTeam.splice(i, 1);
            selectedCardData = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã
            selectedSlotIndex = -1; 
            updateTeamModalContent();
          }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–Ω—è—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
        teamSlot.addEventListener('click', () => handleSlotClick(i));
        
      } else {
        // –ü—É—Å—Ç–æ–π —Å–ª–æ—Ç
        teamSlot.innerHTML = `
          <div class="d-flex">
            <div class="card-thumbnail position-relative empty-slot me-3">
              <div class="position-absolute top-50 start-50 translate-middle text-center">
                <i class="fas fa-plus" style="font-size: 24px; color: rgba(255, 255, 255, 0.5);"></i>
              </div>
            </div>
            <div>
              <p class="mb-0">Slot #${i+1}</p>
              <small class="text-muted">–ö–ª–∏–∫–Ω–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏—Ç—å —Å—é–¥–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É</small>
            </div>
          </div>
        `;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
        teamSlot.addEventListener('click', () => handleSlotClick(i));
      }
      
      modalTeamSlots.appendChild(teamSlot);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
    updateCardSelectionList();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã
    document.getElementById('modalFanBonus').textContent = `+${teamBonuses.fanGain}%`;
    document.getElementById('modalSongBonus').textContent = `+${teamBonuses.songQuality}%`;
    document.getElementById('modalPerfBonus').textContent = `+${teamBonuses.performance}%`;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
  function selectTeamSlot(slotIndex) {
    // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤
    document.querySelectorAll('.team-slot').forEach(slot => {
      slot.classList.remove('highlight', 'selected-slot');
    });
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
    const slot = document.querySelector(`.team-slot[data-slot="${slotIndex}"]`);
    slot.classList.add('highlight', 'selected-slot');
    selectedSlotIndex = slotIndex;
    
    // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ –∫–æ–º–∞–Ω–¥—É
    if (selectedCardData !== null) {
      const availableCards = [...collection].filter(card => 
        !currentTeam.some(member => 
          (member.id && member.id === card.id) || 
          (member.img && member.img === card.img) || 
          (member.imgUrl && member.imgUrl === (card.imgUrl || card.img))
        )
      );
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
      const sortType = document.getElementById('cardFilter').value;
      if (sortType !== 'all') {
        availableCards.sort((a, b) => {
          if (sortType === 'rarity') {
            return b.rarity - a.rarity;
          } else if (sortType === 'power') {
            return b.power - a.power;
          } else if (sortType === 'beauty') {
            return b.beauty - a.beauty;
          } else if (sortType === 'charisma') {
            return b.charisma - a.charisma;
          } else if (sortType === 'vocal') {
            return b.vocal - a.vocal;
          }
          return 0;
        });
      }
      
      addCardToTeam(availableCards[selectedCardData.id], slotIndex);
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
      showFeedback('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞');
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–æ–º–∞–Ω–¥—É
  function addCardToTeam(card, slotIndex) {
    if (!card) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null/undefined
      showFeedback('–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.');
      return;
    }

    const teamMember = {
      id: card.id || Date.now() + Math.random(), // –£–ª—É—á—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ID –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
      name: card.name,
      img: card.img,
      imgUrl: card.imgUrl || card.img,
      rarity: card.rarity,
      power: card.power,
      beauty: card.beauty,
      charisma: card.charisma,
      vocal: card.vocal,
      type: card.type
    };
    
    if (slotIndex < currentTeam.length) {
      currentTeam[slotIndex] = teamMember;
    } else {
      currentTeam.push(teamMember);
    }
    
    showFeedback(`${card.name} –¥–æ–±–∞–≤–ª–µ–Ω(–∞) –≤ –∫–æ–º–∞–Ω–¥—É!`);
    
    selectedCardData = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã
    selectedSlotIndex = -1;
    
    updateTeamModalContent(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ –ü–û–°–õ–ï —Å–±—Ä–æ—Å–∞
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
  function removeTeamMember(index) {
    if (confirm(`Remove ${currentTeam[index].name} from your team?`)) {
      // –£–¥–∞–ª—è–µ–º —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
      currentTeam.splice(index, 1);
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –∫–æ–º–∞–Ω–¥—ã
      calculateTeamBonuses();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
      updateTeamDisplay();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
      updateActivityLog('Team Member Removed', 'A member has been removed from your team');
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤ –∫–æ–º–∞–Ω–¥—ã
  function calculateTeamBonuses() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã
    teamBonuses.fanGain = 0;
    teamBonuses.songQuality = 0;
    teamBonuses.performance = 0;
    
    // –°—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç –∫–∞–∂–¥–æ–≥–æ —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    currentTeam.forEach(member => {
      // –ë–æ–Ω—É—Å —Ñ–∞–Ω–∞—Ç–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ö–∞—Ä–∏–∑–º—ã
      teamBonuses.fanGain += Math.floor(member.charisma / 10) + member.rarity * 2;
      
      // –ë–æ–Ω—É—Å –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Å–Ω–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–∫–∞–ª–∞
      teamBonuses.songQuality += Math.floor(member.vocal / 10) + member.rarity * 2;
      
      // –ë–æ–Ω—É—Å –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏–ª—ã –∏ –∫—Ä–∞—Å–æ—Ç—ã
      teamBonuses.performance += Math.floor((member.power + member.beauty) / 20) + member.rarity * 2;
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
    updateTycoonStats();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Å–Ω–∏
  function produceSong() {
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–µ—Å–Ω–∏ –∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const songTypeSelect = document.getElementById('songType');
    const songType = songTypeSelect.value;
    let cost = 0;
    let baseQuality = 0;
    
    switch (songType) {
      case 'pop':
        cost = 100;
        baseQuality = 1;
        break;
      case 'rock':
        cost = 200;
        baseQuality = 2;
        break;
      case 'ballad':
        cost = 300;
        baseQuality = 3;
        break;
      case 'dance':
        cost = 400;
        baseQuality = 4;
        break;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –≥–µ–º–æ–≤
    if (totalGems < cost) {
      alert(`Not enough gems! You need ${cost}üíé, but you have ${totalGems}üíé`);
      return;
    }
    
    // –°–Ω–∏–º–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    totalGems -= cost;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Å–Ω–∏ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–∞
    let songQuality = baseQuality;
    if (teamBonuses.songQuality > 0) {
      // –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Å–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–æ–Ω—É—Å–∞
      songQuality += Math.floor(teamBonuses.songQuality / 20);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Å–Ω–∏ –¥–æ 5
    songQuality = Math.min(songQuality, 5);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
    const songNames = [
      'Melody of Dreams', 'Digital Heart', 'Electro Harmony', 
      'Future Vision', 'Cyber Angel', 'Crystal Voice', 
      'Neon Destiny', 'Virtual Love', 'Digital Heartbeat', 'Pixel Tears'
    ];
    
    const songTypeNames = {
      'pop': 'Pop',
      'rock': 'Rock',
      'ballad': 'Ballad',
      'dance': 'Dance'
    };
    
    const randomName = songNames[Math.floor(Math.random() * songNames.length)];
    const songName = `${randomName} (${songTypeNames[songType]})`;
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
    const song = {
      id: Date.now(),
      name: songName,
      type: songType,
      quality: songQuality,
      performCount: 0
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é –≤ —Å–ø–∏—Å–æ–∫
    songs.push(song);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Å–µ–Ω
    updateSongList();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç —Å—Ç—É–¥–∏–∏
    addStudioExp(50 * songQuality);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateTycoonStats();
    
    // –û—Ç–º–µ—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    if (!dailyTasks.composeSong) {
      dailyTasks.composeSong = true;
      document.getElementById('task2').checked = true;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
    updateActivityLog(`New Song Created`, `Created "${songName}" (${songQuality}‚òÖ)`);
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω
  function updateSongList() {
    const songList = document.getElementById('songList');
    songList.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω–∏ –≤ —Å–ø–∏—Å–æ–∫
    songs.forEach(song => {
      const songItem = document.createElement('div');
      songItem.className = 'song-item d-flex align-items-center justify-content-between mb-2 p-2 bg-dark rounded';
      
      let stars = '';
      for (let i = 0; i < song.quality; i++) {
        stars += '‚òÖ';
      }
      
      songItem.innerHTML = `
        <span>${song.name} <span class="song-quality-${song.quality}">${stars}</span></span>
        <span class="badge bg-secondary">${song.type}</span>
      `;
      
      songList.appendChild(songItem);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç–∞
    const concertSongSelect = document.getElementById('concertSong');
    if (concertSongSelect) {
      concertSongSelect.innerHTML = '';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω–∏ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
      songs.forEach(song => {
        const option = document.createElement('option');
        option.value = song.id;
        
        let stars = '';
        for (let i = 0; i < song.quality; i++) {
          stars += '‚òÖ';
        }
        
        option.textContent = `${song.name} (${stars})`;
        concertSongSelect.appendChild(option);
      });
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  function updateActivityLog(title, description) {
    const activityLog = document.getElementById('activityLog');
    
    const activityItem = document.createElement('div');
    activityItem.className = 'activity-item d-flex align-items-center mb-2';
    
    activityItem.innerHTML = `
      <div class="activity-icon me-3">
        <i class="fas fa-music"></i>
      </div>
      <div class="activity-content">
        <p class="mb-0">${title}</p>
        <small class="text-muted">${description}</small>
      </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ –ª–æ–≥–∞
    activityLog.insertBefore(activityItem, activityLog.firstChild);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ
    if (activityLog.children.length > 10) {
      activityLog.removeChild(activityLog.lastChild);
    }
  }

  const characters = [
    
  ];

  let collection = [];

  // –ú–∞—Å—Å–∏–≤ —Å –∏–º–µ–Ω–∞–º–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
  const mikuNames = [
    "Hatsune Miku", "Snow Miku", "Future Miku", "Miku Classic", "Miku Angel", 
    "Miku Star", "Miku Dream", "Miku Crystal", "Miku Aurora", "Miku Galaxy"
  ];

  // –ú–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å)
  const localImages = [
    'img_card_game/miku (1).png',
    'img_card_game/miku (2).png',
    'img_card_game/miku (3).png',
    'img_card_game/miku (4).png',
    'img_card_game/miku (5).png',
    'img_card_game/miku (6).png',
    'img_card_game/miku (7).png',
    'img_card_game/miku (1).jpg',
    'img_card_game/miku (2).jpg',
    'img_card_game/miku (3).jpg',
    'img_card_game/miku (4).jpg',
    'img_card_game/miku (5).jpg',
    'img_card_game/miku (6).jpg',
    'img_card_game/miku (7).jpg',
    'img_card_game/miku (8).jpg',
    'img_card_game/miku (9).jpg',
    'img_card_game/miku (10).jpg',
    'img_card_game/miku (11).jpg',
    'img_card_game/miku (12).jpg',
    'img_card_game/miku (13).jpg',
    'img_card_game/miku (14).jpg',
    'img_card_game/miku (15).jpg',
    'img_card_game/miku (16).jpg',
    'img_card_game/miku (17).jpg',
    'img_card_game/miku (18).jpg',
    'img_card_game/miku (19).jpg',
    'img_card_game/miku (20).jpg',
    'img_card_game/miku (21).jpg',
    'img_card_game/miku (22).jpg',
    'img_card_game/miku (23).jpg',
    'img_card_game/miku (24).jpg',
    'img_card_game/miku (25).jpg',
    'img_card_game/miku (26).jpg',
    'img_card_game/miku (27).jpg',
    'img_card_game/miku (28).jpg',
    'img_card_game/miku (29).jpg',
    'img_card_game/miku (30).jpg',
    'img_card_game/miku (31).jpg',
    'img_card_game/miku (32).jpg',
    'img_card_game/miku (33).jpg',
    'img_card_game/miku (34).jpg',
    'img_card_game/miku (35).jpg',
    'img_card_game/miku (82).jpg',
    'img_card_game/miku (81).jpg',
    'img_card_game/miku (80).jpg',
    'img_card_game/miku (79).jpg',
    'img_card_game/miku (78).jpg',
    'img_card_game/miku (77).jpg',
    'img_card_game/miku (76).jpg',
    'img_card_game/miku (75).jpg',
    'img_card_game/miku (74).jpg',
    'img_card_game/miku (73).jpg',
    'img_card_game/miku (72).jpg',
    'img_card_game/miku (71).jpg',
    'img_card_game/miku (70).jpg',
    'img_card_game/miku (69).jpg',
    'img_card_game/miku (68).jpg',
    'img_card_game/miku (67).jpg',
    'img_card_game/miku (66).jpg',
    'img_card_game/miku (65).jpg',
    'img_card_game/miku (64).jpg',
    'img_card_game/miku (63).jpg',
    'img_card_game/miku (62).jpg',
    'img_card_game/miku (61).jpg',
    'img_card_game/miku (60).jpg',
    'img_card_game/miku (59).jpg',
    'img_card_game/miku (58).jpg',
    'img_card_game/miku (57).jpg',
    'img_card_game/miku (56).jpg',
    'img_card_game/miku (55).jpg',
    'img_card_game/miku (54).jpg',
    'img_card_game/miku (53).jpg',
    'img_card_game/miku (52).jpg',    
    'img_card_game/miku (51).jpg',
    'img_card_game/miku (50).jpg',
    'img_card_game/miku (49).jpg',
    'img_card_game/miku (48).jpg',
    'img_card_game/miku (47).jpg',
    'img_card_game/miku (46).jpg',
    'img_card_game/miku (45).jpg',
    'img_card_game/miku (44).jpg',
    'img_card_game/miku (43).jpg',
    'img_card_game/miku (42).jpg',
    'img_card_game/miku (41).jpg',
    'img_card_game/miku (40).jpg',
    'img_card_game/miku (39).jpg',
    'img_card_game/miku (38).jpg',
    'img_card_game/miku (37).jpg',
    'img_card_game/miku (36).jpg'
    
  ];

  let usedLocalImages = new Set();
  let unavailableImages = new Set();

  async function getRandomDanbooruImage() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const availableImages = localImages.filter(image => 
      !usedLocalImages.has(image) && !unavailableImages.has(image)
    );

    if (availableImages.length > 0) {
      const randomIndex = Math.floor(Math.random() * availableImages.length);
      const selectedImage = availableImages[randomIndex];
      
      try {
        const img = new Image();
        img.src = selectedImage;
        await new Promise((resolve, reject) => {
          img.onload = resolve;
          img.onerror = () => {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${selectedImage}: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ`);
            unavailableImages.add(selectedImage); // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ
            reject(new Error(`Failed to load local image: ${selectedImage}`)); // –î–æ–±–∞–≤–ª—è–µ–º reject —Å –æ—à–∏–±–∫–æ–π
          };
        });
        usedLocalImages.add(selectedImage);
        return selectedImage;
      } catch (error) {
        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–µ
        // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏, –µ—Å–ª–∏ –≤—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        if (unavailableImages.size < localImages.length) {
          return getRandomDanbooruImage(); 
        } else {
          console.error("–í—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å.");
          return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ –≤—Å–µ –ø–µ—Ä–µ–ø—Ä–æ–±–æ–≤–∞–Ω—ã –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        }
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
    if (usedLocalImages.size === localImages.length - unavailableImages.size && availableImages.length === 0) {
      console.log("–í—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ...");
      usedLocalImages.clear();
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      return getRandomDanbooruImage();
    }

    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.");
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
  }

  let usedNames = new Set();

  function generateUniqueName(imgUrl, rarity = 1, power = 0, beauty = 0, charisma = 0, vocal = 0) {
    // –°–æ–∑–¥–∞–µ–º —Ö—ç—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const hash = [imgUrl, rarity, power, beauty, charisma, vocal]
      .join('_')
      .split('')
      .reduce((acc, char) => acc + char.charCodeAt(0), 0);

    // –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const prefixes = {
      power: ["Energetic", "Powerful", "Dynamic", "Strong"],
      beauty: ["Elegant", "Graceful", "Beautiful", "Charming"],
      charisma: ["Charismatic", "Magnetic", "Radiant", "Stunning"],
      vocal: ["Melodic", "Harmonic", "Singing", "Musical"]
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
    const stats = {
      power: power,
      beauty: beauty,
      charisma: charisma,
      vocal: vocal
    };
    
    const dominantStat = Object.entries(stats).reduce((a, b) => a[1] > b[1] ? a : b)[0];
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const prefix = prefixes[dominantStat][hash % prefixes[dominantStat].length];

    const names = [
      "Miku", "Snow Princess", "Future Diva", "Virtual Singer", "Cyber Angel", 
      "Star Vocalist", "Dream Idol", "Crystal Voice", "Digital Performer", "Galaxy Queen"
    ];
    
    const baseName = names[hash % names.length];
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID (3 —Ü–∏—Ñ—Ä—ã)
    const shortId = (hash % 1000).toString().padStart(3, '0');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–º—è
    return `${prefix} ${baseName} #${shortId}`;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  function generateStatsDescription(power, beauty, charisma, vocal) {
    return `<div class="card-stats">
      <div><strong>P${power}</strong>: Power (–°–∏–ª–∞)</div>
      <div><strong>B${beauty}</strong>: Beauty (–ö—Ä–∞—Å–æ—Ç–∞)</div>
      <div><strong>C${charisma}</strong>: Charisma (–•–∞—Ä–∏–∑–º–∞)</div>
      <div><strong>V${vocal}</strong>: Vocal (–í–æ–∫–∞–ª)</div>
    </div>`;
  }

  // –î–æ–±–∞–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  const TOTAL_UNIQUE_CARDS = localImages.length; // <--- –û–±–Ω–æ–≤–ª—è–µ–º, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–ª-–≤—É –∞—Ä—Ç–æ–≤
  let uniqueCardsCollected = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç

  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö
  let uniqueCards = {};

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  function updateCollectionCounter() {
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    uniqueCardsCollected = Object.keys(uniqueCards).length;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const cardCountElement = document.querySelector('.card-count');
    if (cardCountElement) {
      cardCountElement.textContent = `${uniqueCardsCollected}/${TOTAL_UNIQUE_CARDS}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    const profileTotalCardsElement = document.getElementById('profileTotalCards');
    if (profileTotalCardsElement) {
      profileTotalCardsElement.textContent = uniqueCardsCollected;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const collectionPercentage = Math.floor((uniqueCardsCollected / TOTAL_UNIQUE_CARDS) * 100);
    console.log(`Collection progress: ${collectionPercentage}%`);
  }

  function generateCardKey(imgUrl, rarity, power, beauty, charisma, vocal) {
    return `${imgUrl}_${rarity}_${power}_${beauty}_${charisma}_${vocal}`;
  }

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—É–ª–ª–∞
  let lastPulledCardsData = [];
  let gachaPullModalInstance = null;

  // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
  function displayPulledCards(cardsData, containerId) {
    const resultContainer = document.getElementById(containerId);
    if (!resultContainer) {
        console.error(`Container with id ${containerId} not found!`);
        return;
    }
    resultContainer.innerHTML = ""; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

    cardsData.forEach((char, index) => {
        const cardCol = document.createElement("div");
        cardCol.className = `col-lg-3 col-md-4 col-sm-6 gacha-animation`; 

        const cardElement = document.createElement("div");
        cardElement.className = `gacha-card p-2 rarity-${char.rarity}`;
        cardElement.innerHTML = `
            <img src="${char.img}" class="img-fluid rounded" alt="${char.name}"/>
            <div class="text-center mt-1">
              <h6 class="mb-0" style="font-size: 0.9rem;">${char.name}</h6> 
              <span style="font-size: 0.8rem;">${"‚òÖ".repeat(char.rarity)}</span>
            </div>
        `;

        cardElement.style.animation = "drop-in 0.5s ease-out";
        cardElement.style.animationDelay = `${index * 0.1}s`;

        // --- –£–î–ê–õ–Ø–ï–ú –£–°–õ–û–í–ò–ï IF –ò –í–°–ï–ì–î–ê –î–û–ë–ê–í–õ–Ø–ï–ú –ö–õ–ò–ö --- 
        // if (containerId === 'gachaResults') { ... } else { ... }
        cardElement.addEventListener("click", () => {
            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            const modalImage = document.getElementById("modalImage");
            const modalName = document.getElementById("modalName");
            const modalRarity = document.getElementById("modalRarity");
            const modalPower = document.getElementById("modalPower");
            const modalBeauty = document.getElementById("modalBeauty");
            const modalCharisma = document.getElementById("modalCharisma");
            const modalVocal = document.getElementById("modalVocal");
            const modalDescription = document.getElementById("modalDescription");
            const modalStatsInfo = document.getElementById("modalStatsInfo");
            const modalPowerBar = document.getElementById("modalPowerBar");
            const modalBeautyBar = document.getElementById("modalBeautyBar");
            const modalCharismaBar = document.getElementById("modalCharismaBar");
            const modalVocalBar = document.getElementById("modalVocalBar");
            const characterModalElement = document.getElementById("characterModal");

            if (!characterModalElement || !modalImage || !modalName /* ... –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ... */) {
                console.error("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
                return;
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π
            modalImage.src = char.imgUrl || char.img; // –ò—Å–ø–æ–ª—å–∑—É–µ–º imgUrl –∏–ª–∏ img
            modalName.textContent = char.name;
            modalRarity.textContent = "‚òÖ".repeat(char.rarity);
            modalPower.textContent = char.power;
            modalBeauty.textContent = char.beauty;
            modalCharisma.textContent = char.charisma;
            modalVocal.textContent = char.vocal;
            modalDescription.textContent = char.description;
            if(modalStatsInfo) modalStatsInfo.innerHTML = generateStatsDescription(char.power, char.beauty, char.charisma, char.vocal);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
            if(modalPowerBar) modalPowerBar.style.width = `${char.power}%`;
            if(modalBeautyBar) modalBeautyBar.style.width = `${char.beauty}%`;
            if(modalCharismaBar) modalCharismaBar.style.width = `${char.charisma}%`;
            if(modalVocalBar) modalVocalBar.style.width = `${char.vocal}%`;

            // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ Bootstrap
            // –í–∞–∂–Ω–æ: –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–∂–¥—ã–π —Ä–∞–∑, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
            let characterModalInstance = bootstrap.Modal.getInstance(characterModalElement);
            if (!characterModalInstance) {
                characterModalInstance = new bootstrap.Modal(characterModalElement);
            }
            characterModalInstance.show();
        });
        // ---------------------------------------------------
        
        cardCol.appendChild(cardElement);
        resultContainer.appendChild(cardCol);

        // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
        try {
            const audio = new Audio("https://www.soundjay.com/button/beep-07.mp3");
            setTimeout(() => audio.play(), index * 150);
        } catch (e) {
            console.log("–ê—É–¥–∏–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏:", e);
        }
    }); // –ö–æ–Ω–µ—Ü forEach
  } // –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ displayPulledCards

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
  function getRandomRarity() {
    const random = Math.random() * 100; // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100

    if (random < 0.1) {
      return 6; // 6 –∑–≤–µ–∑–¥ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 0.1%
    } else if (random < 1) {
      return 5; // 5 –∑–≤–µ–∑–¥ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 0.9%
    } else if (random < 5) {
      return 4; // 4 –∑–≤–µ–∑–¥—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 4%
    } else if (random < 15) {
      return 3; // 3 –∑–≤–µ–∑–¥—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 10%
    } else if (random < 40) {
      return 2; // 2 –∑–≤–µ–∑–¥—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 25%
    } else {
      return 1; // 1 –∑–≤–µ–∑–¥–∞ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 60%
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º pullGacha
  async function pullGacha(times) {
    const cost = times * 10;
    if (totalGems < cost) {
      alert(`Not enough gems! You need ${cost}üíé, but you have ${totalGems}üíé`);
      return;
    }

    totalGems -= cost;
    updateTycoonStats();

    const modalElement = document.getElementById('gachaPullModal');
    const modalMessage = document.getElementById('gachaPullModalMessage');
    const collectButton = document.getElementById('collectGachaButton');
    const spinner = document.getElementById('gachaSpinner');
    const modalResultsContainer = document.getElementById('gachaPullModalResults');

    if (!modalElement || !modalMessage || !collectButton || !spinner || !modalResultsContainer) {
        console.error("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≥–∞—á–∏!");
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
        return;
    }

    modalMessage.textContent = `Pulling ${times} card(s)...`;
    collectButton.disabled = true;
    spinner.style.display = 'block';
    modalResultsContainer.innerHTML = '';

    if (!gachaPullModalInstance) {
        if (modalElement) {
          gachaPullModalInstance = new bootstrap.Modal(modalElement);
        } else {
          console.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: modalElement is null");
          return;
        }
    }
    gachaPullModalInstance.show();

    // --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç (–ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê) ---
    lastPulledCardsData = [];
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–æ–≤ –∏–∑ –ì–õ–û–ë–ê–õ–¨–ù–û–ô –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –î–û –Ω–∞—á–∞–ª–∞ —ç—Ç–æ–≥–æ –ø—É–ª–ª–∞
    const uniqueImageUrlsInGlobalCollection = new Set(
        Object.values(uniqueCards).map(card => card.imgUrl || card.img)
    );
    
    // –ê—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –£–ù–ò–ö–ê–õ–¨–ù–û–ô –∫–∞—Ä—Ç—ã –í –≠–¢–û–ú –ü–£–õ–õ–ï
    let imageUrlsUsedForUniqueCardInThisBatch = new Set();

    for (let i = 0; i < times; i++) {
        // 1. –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç
        // getRandomDanbooruImage —É–∂–µ –ø—ã—Ç–∞–µ—Ç—Å—è –¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –≤ –ø–∞–∫–µ—Ç–µ —á–µ—Ä–µ–∑ usedLocalImages
        const imgUrl = await getRandomDanbooruImage();

        if (!imgUrl) {
            console.warn(`–ü—Ä–æ–ø—É—Å–∫ –∫–∞—Ä—Ç—ã ${i + 1} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è imgUrl.`);
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å null –≤ lastPulledCardsData –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, 
            // —á—Ç–æ–±—ã –≤ lastPulledCardsData –±—ã–ª–∏ —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
            continue; 
        }

        // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∏–º—è –∏ —Ç.–¥.
        const rarity = getRandomRarity();
        const maxStat = rarity * 20;
        const power = Math.floor(Math.random() * maxStat) + 1;
        const beauty = Math.floor(Math.random() * maxStat) + 1;
        const charisma = Math.floor(Math.random() * maxStat) + 1;
        const vocal = Math.floor(Math.random() * maxStat) + 1;
        
        const uniqueName = generateUniqueName(imgUrl, rarity, power, beauty, charisma, vocal);
        // cardKey –≤—Å–µ –µ—â–µ –ø–æ–ª–µ–∑–µ–Ω, –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º —Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º imgUrl (–Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ) 
        // –≤ –æ–±—â–µ–º `collection` —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç–∞–º–∏, –∏–ª–∏ –¥–ª—è ID.
        const cardKey = generateCardKey(imgUrl, rarity, power, beauty, charisma, vocal);

        const char = {
            id: cardKey, 
            name: uniqueName,
            rarity: rarity,
            img: imgUrl,
            imgUrl: imgUrl,
            type: "miku",
            power: power,
            beauty: beauty,
            charisma: charisma,
            vocal: vocal,
            description: "A unique Miku character."
        };

        // 3. –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é (collection)
        collection.push(char);

        // 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–ª–∂–Ω–∞ –ª–∏ —ç—Ç–∞ –∫–∞—Ä—Ç–∞ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –£–ù–ò–ö–ê–õ–¨–ù–´–• –ê–†–¢–û–í (uniqueCards)
        // –£—Å–ª–æ–≤–∏–µ: –∞—Ä—Ç –µ—â–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–æ–≤
        // –ò –∞—Ä—Ç –µ—â–µ –Ω–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –¥—Ä—É–≥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –í –≠–¢–û–ú –ü–£–õ–õ–ï
        if (!uniqueImageUrlsInGlobalCollection.has(imgUrl) && 
            !imageUrlsUsedForUniqueCardInThisBatch.has(imgUrl)) {
            
            uniqueCards[imgUrl] = char; // –ö–ª—é—á–æ–º –≤ uniqueCards —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å–∞–º imgUrl –¥–ª—è —Å—Ç—Ä–æ–≥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä—Ç–∞
            imageUrlsUsedForUniqueCardInThisBatch.add(imgUrl); // –û—Ç–º–µ—á–∞–µ–º –∞—Ä—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –≤ —ç—Ç–æ–º –ø–∞–∫–µ—Ç–µ
            
            console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –£–ù–ò–ö–ê–õ–¨–ù–ê–Ø –∫–∞—Ä—Ç–∞ (–ê—Ä—Ç: ${imgUrl}, –ò–º—è: ${uniqueName}) –≤ uniqueCards.`);
        } else {
            console.log(`–ê—Ä—Ç ${imgUrl} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã (–≥–ª–æ–±–∞–ª—å–Ω–æ –∏–ª–∏ –≤ —ç—Ç–æ–º –ø–∞–∫–µ—Ç–µ). –ö–∞—Ä—Ç–∞ '${uniqueName}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é.`);
        }
        
        lastPulledCardsData.push(char); // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç —ç—Ç–æ–≥–æ –ø—É–ª–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª–∫–µ
    }
    // --- –ö–æ–Ω–µ—Ü –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç ---

    // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ ---
    if (spinner) spinner.style.display = 'none';
    if (modalMessage) modalMessage.textContent = `Pull complete! You got ${lastPulledCardsData.filter(c => c !== null).length} card(s).`;

    displayPulledCards(lastPulledCardsData.filter(c => c !== null), 'gachaPullModalResults');

    if (collectButton) collectButton.disabled = false;
}

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–±—Ä–∞—Ç—å"
  document.addEventListener('DOMContentLoaded', function() {
    const collectButton = document.getElementById('collectGachaButton');
    if (collectButton) {
        collectButton.addEventListener('click', function() {
            if (lastPulledCardsData.length > 0) {
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                displayPulledCards(lastPulledCardsData, 'gachaResults'); // <-- –î–æ–±–∞–≤–ª—è–µ–º ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                updateCollection();
                updateCollectionCounter();
                updateTycoonStats(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ç—ã, –≤–∫–ª—é—á–∞—è –≥–µ–º—ã
            }

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            if (gachaPullModalInstance) {
                gachaPullModalInstance.hide();
            }

            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            lastPulledCardsData = [];
        });
    }

    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ DOMContentLoaded ...
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≥–∞—á–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    const modalElement = document.getElementById('gachaPullModal');
    if (modalElement) {
        // –ù–µ —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–¥–µ—Å—å, —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–µ
    }
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ...
  });

  function updateCollection() {
    const allTab = document.getElementById("all");
    const mikuTab = document.getElementById("miku");
    const eventTab = document.getElementById("event");

    allTab.innerHTML = "";
    mikuTab.innerHTML = "";
    eventTab.innerHTML = "";

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∏–º–µ–Ω–∏
    const groupedCollection = collection.reduce((acc, char) => {
      if (!acc[char.name]) {
        acc[char.name] = { ...char, count: 1 };
      } else {
        acc[char.name].count += 1;
      }
      return acc;
    }, {});

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const sortType = document.getElementById("sortType").value;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    const sortedCollection = Object.values(groupedCollection).sort((a, b) => {
      if (sortType === "rarity") {
        return b.rarity - a.rarity; // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
      } else if (sortType === "power") {
        return b.power - a.power; // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏–ª–µ
      } else if (sortType === "beauty") {
        return b.beauty - a.beauty; // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫—Ä–∞—Å–æ—Ç–µ
      } else if (sortType === "charisma") {
        return b.charisma - a.charisma; // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ö–∞—Ä–∏–∑–º–µ
      } else if (sortType === "vocal") {
        return b.vocal - a.vocal; // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∫–∞–ª—É
      } else {
        return 0; // –ë–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      }
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏)
    if (sortType === "rarity") {
      const groupedByRarity = sortedCollection.reduce((acc, char) => {
        if (!acc[char.rarity]) {
          acc[char.rarity] = [];
        }
        acc[char.rarity].push(char);
        return acc;
      }, {});

      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
      Object.keys(groupedByRarity).sort((a, b) => b - a).forEach(rarity => {
        const groupHeader = document.createElement("div");
        groupHeader.className = "rarity-header";
        groupHeader.innerHTML = `<span>${"‚òÖ".repeat(rarity)}</span> –†–µ–¥–∫–æ—Å—Ç—å: ${rarity}‚òÖ`;
        allTab.appendChild(groupHeader);

        groupedByRarity[rarity].forEach(char => {
          const el = document.createElement("div");
          el.className = "d-inline-block text-center m-2";
          el.innerHTML = `
            <img src="${char.img}" class="img-thumbnail" alt="${char.name}" style="width: 100px;"/>
            <div class="mt-1">${char.name} <span class="badge bg-secondary">x${char.count}</span></div>
          `;

          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
          el.addEventListener("click", () => {
            document.getElementById("modalImage").src = char.img;
            document.getElementById("modalName").textContent = char.name;
            document.getElementById("modalRarity").textContent = "‚òÖ".repeat(char.rarity);
            document.getElementById("modalPower").textContent = char.power;
            document.getElementById("modalBeauty").textContent = char.beauty;
            document.getElementById("modalCharisma").textContent = char.charisma;
            document.getElementById("modalVocal").textContent = char.vocal;
            document.getElementById("modalDescription").textContent = char.description;
            document.getElementById("modalStatsInfo").innerHTML = generateStatsDescription(char.power, char.beauty, char.charisma, char.vocal);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
            document.getElementById("modalPowerBar").style.width = `${char.power}%`;
            document.getElementById("modalBeautyBar").style.width = `${char.beauty}%`;
            document.getElementById("modalCharismaBar").style.width = `${char.charisma}%`;
            document.getElementById("modalVocalBar").style.width = `${char.vocal}%`;

            const modal = new bootstrap.Modal(document.getElementById("characterModal"));
            modal.show();
          });

          allTab.appendChild(el);
          if (char.type === "miku") mikuTab.appendChild(el.cloneNode(true));
          if (char.type === "event") eventTab.appendChild(el.cloneNode(true));
        });
      });
    } else {
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
      sortedCollection.forEach(char => {
        const el = document.createElement("div");
        el.className = "d-inline-block text-center m-2";
        el.innerHTML = `
          <img src="${char.img}" class="img-thumbnail" alt="${char.name}" style="width: 100px;"/>
          <div class="mt-1">${char.name} <span class="badge bg-secondary">x${char.count}</span></div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        el.addEventListener("click", () => {
          document.getElementById("modalImage").src = char.img;
          document.getElementById("modalName").textContent = char.name;
          document.getElementById("modalRarity").textContent = "‚òÖ".repeat(char.rarity);
          document.getElementById("modalPower").textContent = char.power;
          document.getElementById("modalBeauty").textContent = char.beauty;
          document.getElementById("modalCharisma").textContent = char.charisma;
          document.getElementById("modalVocal").textContent = char.vocal;
          document.getElementById("modalDescription").textContent = char.description;
          document.getElementById("modalStatsInfo").innerHTML = generateStatsDescription(char.power, char.beauty, char.charisma, char.vocal);

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
          document.getElementById("modalPowerBar").style.width = `${char.power}%`;
          document.getElementById("modalBeautyBar").style.width = `${char.beauty}%`;
          document.getElementById("modalCharismaBar").style.width = `${char.charisma}%`;
          document.getElementById("modalVocalBar").style.width = `${char.vocal}%`;

          const modal = new bootstrap.Modal(document.getElementById("characterModal"));
          modal.show();
        });

        allTab.appendChild(el);
        if (char.type === "miku") mikuTab.appendChild(el.cloneNode(true));
        if (char.type === "event") eventTab.appendChild(el.cloneNode(true));
      });
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if (collection.length === 0) {
      characters.forEach(char => {
        collection.push({...char, 
          power: Math.floor(Math.random() * 80) + 20,
          beauty: Math.floor(Math.random() * 80) + 20,
          charisma: Math.floor(Math.random() * 80) + 20,
          vocal: Math.floor(Math.random() * 80) + 20,
          description: "A starter Miku character."
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
        if (!uniqueCards[char.img]) {
          uniqueCards[char.img] = char;
        }
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      updateCollectionCounter();
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–π–∫—É–Ω-—Ä–µ–∂–∏–º–∞
    updateTycoonStats();
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
  function collectDailyTasks() {
    let totalReward = 0;
    let gachaTickets = 0;
    let message = 'Collected rewards: ';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    if (dailyTasks.completeConcert) {
      totalReward += 50;
      message += '50üíé for concert, ';
    }
    
    if (dailyTasks.composeSong) {
      totalReward += 100;
      message += '100üíé for song, ';
    }
    
    if (dailyTasks.gainFans) {
      totalReward += 100;
      gachaTickets += 1;
      message += '100üíé + 1 ticket for fans, ';
    }
    
    // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    if (totalReward > 0) {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
      totalGems += totalReward;
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏ —á–µ–∫–±–æ–∫—Å—ã
      dailyTasks.completeConcert = false;
      dailyTasks.composeSong = false;
      dailyTasks.gainFans = false;
      
      document.getElementById('task1').checked = false;
      document.getElementById('task2').checked = false;
      document.getElementById('task3').checked = false;
      
      // –û–±—Ä–µ–∑–∞–µ–º –∑–∞–ø—è—Ç—É—é –∏ –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      message = message.slice(0, -2);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      alert(`${message}. Total: ${totalReward}üíé${gachaTickets > 0 ? ' + ' + gachaTickets + ' gacha ticket(s)' : ''}`);
      updateTycoonStats();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
      updateActivityLog('Daily Tasks Completed', `Received ${totalReward}üíé${gachaTickets > 0 ? ' + ' + gachaTickets + ' ticket(s)' : ''}`);
    } else {
      alert('No completed tasks to collect rewards from.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –±–∏–ª–µ—Ç–∞
  document.addEventListener('DOMContentLoaded', function() {
    const ticketPriceSlider = document.getElementById('ticketPrice');
    const ticketPriceValue = document.getElementById('ticketPriceValue');
    
    if (ticketPriceSlider && ticketPriceValue) {
      ticketPriceSlider.addEventListener('input', function() {
        ticketPriceValue.textContent = this.value;
      });
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Ü–µ—Ä—Ç–∞
  function startConcert() {
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É
    const venueSelect = document.getElementById('concertVenue');
    const venue = venueSelect.value;
    
    // –ó–∞—Ç—Ä–∞—Ç—ã –∏ –ª–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫
    const venueCosts = {
      'small': 50,
      'medium': 200,
      'large': 500,
      'arena': 1000,
      'stadium': 2000
    };
    
    const venueMaxFans = {
      'small': 100,
      'medium': 500,
      'large': 2000,
      'arena': 5000,
      'stadium': 10000
    };
    
    const venueNames = {
      'small': 'Small Venue',
      'medium': 'Medium Venue',
      'large': 'Large Venue',
      'arena': 'Arena',
      'stadium': 'Stadium'
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≥–µ–º–æ–≤
    if (totalGems < venueCosts[venue]) {
      alert(`Not enough gems! You need ${venueCosts[venue]}üíé, but you have ${totalGems}üíé`);
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–µ—Å–Ω—é
    const songSelect = document.getElementById('concertSong');
    let selectedSong;
    
    if (songSelect && songSelect.value !== 'default') {
      const songId = parseInt(songSelect.value);
      selectedSong = songs.find(song => song.id === songId);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–ø–µ—Å–Ω—é
      selectedSong = {
        name: 'Example Song',
        quality: 3,
        type: 'pop'
      };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞
    const ticketPrice = parseInt(document.getElementById('ticketPrice').value);
    
    // –°–Ω–∏–º–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –ø–ª–æ—â–∞–¥–∫–∏
    totalGems -= venueCosts[venue];
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–Ω–∞—Ç–æ–≤
    let baseFans = Math.floor(Math.random() * (venueMaxFans[venue] / 2)) + Math.floor(venueMaxFans[venue] / 2);
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –±–∏–ª–µ—Ç–∞
    // –ß–µ–º –≤—ã—à–µ —Ü–µ–Ω–∞, —Ç–µ–º –º–µ–Ω—å—à–µ —Ñ–∞–Ω–∞—Ç–æ–≤, –Ω–æ –±–æ–ª—å—à–µ –¥–æ—Ö–æ–¥
    const priceMultiplier = 1 - ((ticketPrice - 10) / 100);
    baseFans = Math.floor(baseFans * priceMultiplier);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Å–Ω–∏
    baseFans = Math.floor(baseFans * (1 + (selectedSong.quality * 0.1)));
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å –∫–æ–º–∞–Ω–¥—ã
    if (teamBonuses.fanGain > 0) {
      baseFans = Math.floor(baseFans * (1 + (teamBonuses.fanGain / 100)));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞–∫—Å–∏–º—É–º –¥–ª—è –ø–ª–æ—â–∞–¥–∫–∏
    const actualFans = Math.min(baseFans, venueMaxFans[venue]);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≥–µ–º—ã
    let earnedGems = Math.floor(actualFans * (ticketPrice / 10));
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å –∫–æ–º–∞–Ω–¥—ã –∫ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—é
    if (teamBonuses.performance > 0) {
      earnedGems = Math.floor(earnedGems * (1 + (teamBonuses.performance / 100)));
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–Ω–∞—Ç–æ–≤ –∏ –≥–µ–º—ã
    totalFans += actualFans;
    totalGems += earnedGems;
    totalConcerts += 1;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç —Å—Ç—É–¥–∏–∏
    addStudioExp(100 + (selectedSong.quality * 20));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥ —Å—Ç—É–¥–∏–∏
    updateStudioRank();
    
    // –û—Ç–º–µ—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    if (!dailyTasks.completeConcert) {
      dailyTasks.completeConcert = true;
      document.getElementById('task1').checked = true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é —Ñ–∞–Ω–∞—Ç–æ–≤
    if (!dailyTasks.gainFans && actualFans >= 100) {
      dailyTasks.gainFans = true;
      document.getElementById('task3').checked = true;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateTycoonStats();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è
    let performanceRating = '';
    let ratingStars = '';
    let performanceComment = '';
    
    // –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–Ω–∞—Ç–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–∞–∫—Å–∏–º—É–º–∞
    const performanceQuality = actualFans / venueMaxFans[venue];
    
    if (performanceQuality >= 0.9) {
      performanceRating = 'Outstanding!';
      ratingStars = '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ';
      performanceComment = 'The performance was a huge success! The fans loved every moment!';
    } else if (performanceQuality >= 0.7) {
      performanceRating = 'Great!';
      ratingStars = '‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ';
      performanceComment = 'The performance was very successful! Most fans really enjoyed it!';
    } else if (performanceQuality >= 0.5) {
      performanceRating = 'Good!';
      ratingStars = '‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ';
      performanceComment = 'The performance was good! The fans enjoyed the show.';
    } else if (performanceQuality >= 0.3) {
      performanceRating = 'Average';
      ratingStars = '‚òÖ‚òÖ‚òÜ‚òÜ‚òÜ';
      performanceComment = 'The performance was average. Some fans seemed to enjoy it.';
    } else {
      performanceRating = 'Poor';
      ratingStars = '‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ';
      performanceComment = 'The performance was not very good. Few fans enjoyed it.';
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    document.getElementById('concertVenueName').textContent = venueNames[venue];
    document.getElementById('concertSongName').textContent = `Song: ${selectedSong.name}`;
    document.getElementById('concertFans').textContent = `+${actualFans}`;
    document.getElementById('concertGems').textContent = `+${earnedGems}`;
    document.getElementById('performanceRating').textContent = performanceRating;
    document.getElementById('ratingStars').textContent = ratingStars;
    document.getElementById('performanceComment').textContent = performanceComment;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
    if (concertResultModalInstance) {
      concertResultModalInstance.hide();
      clearBackdrops();
      concertResultModalInstance = null;
    }
    
    // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ backdrop —ç–ª–µ–º–µ–Ω—Ç—ã
    clearBackdrops();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const concertResultModalElement = document.getElementById('concertResultModal');
    concertResultModalInstance = new bootstrap.Modal(concertResultModalElement);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    concertResultModalElement.addEventListener('hidden.bs.modal', function() {
      clearBackdrops();
    }, { once: true });
    
    concertResultModalInstance.show();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
    updateActivityLog('Concert Performed', `Gained ${actualFans} fans and ${earnedGems} gems`);
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è" —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–Ω—Ü–µ—Ä—Ç–∞
  function shareConcertResult() {
    alert('Concert results shared on social media!');
    
    // –ë–æ–Ω—É—Å –∑–∞ —à–µ—Ä–∏–Ω–≥
    totalFans += 10;
    updateTycoonStats();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
    updateActivityLog('Shared Results', 'Gained 10 extra fans from social media');
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  document.addEventListener('DOMContentLoaded', function() {
    const saveTeamButton = document.getElementById('saveTeam');
    if (saveTeamButton) {
      saveTeamButton.addEventListener('click', function() {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (teamModalInstance) {
          teamModalInstance.hide();
        }
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –∫–æ–º–∞–Ω–¥—ã
        calculateTeamBonuses();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        updateTeamDisplay();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        showFeedback('Team composition saved!');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
        updateActivityLog('Team Updated', 'Your team composition has been updated');
      });
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ backdrop —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  function clearBackdrops() {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ modal-backdrop —ç–ª–µ–º–µ–Ω—Ç—ã
    document.querySelectorAll('.modal-backdrop').forEach(backdrop => {
      backdrop.remove();
    });
    
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å modal-open —Å body
    document.body.classList.remove('modal-open');
    document.body.style.overflow = '';
    document.body.style.paddingRight = '';
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  document.addEventListener('DOMContentLoaded', function() {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ backdrop —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    clearBackdrops();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–¥–∞–ª—è—Ç—å backdrop
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
      modal.addEventListener('hidden.bs.modal', function() {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        setTimeout(clearBackdrops, 100);
      });
    });
  });

  

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  function animateElementsOnLoad() {
    const elements = document.querySelectorAll('.feature-box, .site-header, .card-thumbnail, .feature-button, .play-button');
    
    elements.forEach((element, index) => {
      // –ó–∞–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
      element.style.opacity = '0';
      element.style.transform = 'translateY(20px)';
      element.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
      setTimeout(() => {
        element.style.opacity = '1';
        element.style.transform = 'translateY(0)';
      }, 100 * index);
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  document.addEventListener('DOMContentLoaded', function() {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ backdrop —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    clearBackdrops();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–¥–∞–ª—è—Ç—å backdrop
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
      modal.addEventListener('hidden.bs.modal', function() {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        setTimeout(clearBackdrops, 100);
      });
    });
    

    
    // –ê–Ω–∏–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    animateElementsOnLoad();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞ –¥–ª—è —Ñ–æ–Ω–∞
    document.addEventListener('mousemove', function(e) {
      const moveX = (e.clientX - window.innerWidth / 2) / 50;
      const moveY = (e.clientY - window.innerHeight / 2) / 50;
      
      document.querySelectorAll('.musical-particle-1, .musical-particle-2, .musical-particle-3, .musical-particle-4, .musical-particle-5, .floating-note').forEach(particle => {
        particle.style.transform = `translate(${moveX}px, ${moveY}px)`;
      });
    });

    // Initialize Starry Parallax Background
    initStarryParallax();
  });

  // --- Starry Parallax Background ---
  function generateStars(numStars) {
    const parallaxBg = document.querySelector('.parallax-bg');
    if (!parallaxBg) return;

    for (let i = 0; i < numStars; i++) {
      const star = document.createElement('div');
      star.classList.add('star');

      const size = Math.random() * 3 + 1; // Star size between 1px and 4px
      star.style.width = `${size}px`;
      star.style.height = `${size}px`;

      star.style.top = `${Math.random() * 100}%`;
      star.style.left = `${Math.random() * 100}%`;

      // Random animation duration and delay
      star.style.animationDuration = `${Math.random() * 3 + 2}s`; // 2s to 5s
      star.style.animationDelay = `${Math.random() * 5}s`; // 0s to 5s

      // Assign to a random layer
      const layerType = Math.floor(Math.random() * 3) + 1;
      let layerClass = `star-layer${layerType}`;
      star.classList.add(layerClass);
      
      // Store the original Z transform for parallax calculation
      // This assumes the translateZ value is set by the class star-layerX in CSS
      let translateZValue = 0;
      if (layerType === 1) translateZValue = -300;
      else if (layerType === 2) translateZValue = -200;
      else if (layerType === 3) translateZValue = -100;
      star.dataset.translateZ = translateZValue;


      parallaxBg.appendChild(star);
    }
  }

  function initStarryParallax() {
    const numStars = 100; // Number of stars to generate
    generateStars(numStars);

    const parallaxBg = document.querySelector('.parallax-bg');
    if (!parallaxBg) return;

    window.addEventListener('mousemove', function(event) {
      const mouseX = (event.clientX - window.innerWidth / 2);
      const mouseY = (event.clientY - window.innerHeight / 2);

      const stars = document.querySelectorAll('.parallax-bg .star');
      stars.forEach(star => {
        const z = parseFloat(star.dataset.translateZ || 0);
        // Parallax factor: closer stars (smaller negative Z) move more
        // Adjust this factor to control the intensity of the parallax effect
        const parallaxFactor = (1000 + z) / 20000; // Example factor, can be tuned

        const offsetX = mouseX * parallaxFactor;
        const offsetY = mouseY * parallaxFactor;

        // Apply the parallax offset along with the original Z transform
        star.style.transform = `translate3d(${offsetX}px, ${offsetY}px, ${z}px)`;
      });
    });
  }
  // --- End Starry Parallax Background ---

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  const showStatsInfoBtn = document.getElementById('showStatsInfoBtn');
  if (showStatsInfoBtn) {
    showStatsInfoBtn.addEventListener('click', function() {
      // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
      const statsInfoModal = document.createElement('div');
      // ... (rest of the modal creation code)
      statsInfoModal.className = 'modal fade';
      statsInfoModal.id = 'statsInfoModal';
      statsInfoModal.innerHTML = `
        <div class="modal-dialog modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <p><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:</strong></p>
              <ul class="stats-explanation">
                <li><strong>P (Power/–°–∏–ª–∞)</strong>: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –∏ –≤–ª–∏—è–µ—Ç –Ω–∞ —É—Å–ø–µ—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π. –ß–µ–º –≤—ã—à–µ —Å–∏–ª–∞, —Ç–µ–º –±–æ–ª—å—à–µ –≤–ª–∏—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É.</li>
                <li><strong>B (Beauty/–ö—Ä–∞—Å–æ—Ç–∞)</strong>: –í–ª–∏—è–µ—Ç –Ω–∞ –≤–Ω–µ—à–Ω—é—é –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é. –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å –≤—ã—Å–æ–∫–æ–π –∫—Ä–∞—Å–æ—Ç–æ–π —Å–æ–∑–¥–∞—é—Ç –±–æ–ª–µ–µ –∑—Ä–µ–ª–∏—â–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è.</li>
                <li><strong>C (Charisma/–•–∞—Ä–∏–∑–º–∞)</strong>: –ù–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–Ω–∞—Ç–æ–≤ –∏ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å –≤—ã—Å–æ–∫–æ–π —Ö–∞—Ä–∏–∑–º–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç –±–æ–ª—å—à–µ —Ñ–∞–Ω–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π.</li>
                <li><strong>V (Vocal/–í–æ–∫–∞–ª)</strong>: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –ø–µ—Å–µ–Ω –∏ –∏—Ö –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å. –•–æ—Ä–æ—à–∏–π –≤–æ–∫–∞–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —É—Å–ø–µ—à–Ω—ã–µ —Ç—Ä–µ–∫–∏.</li>
              </ul>
              <div class="mt-3">
                <p><strong>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</strong></p>
                <ul>
                  <li>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–æ—Ä–æ—à–∏—Ö –ø–µ—Å–µ–Ω –≤—ã–±–∏—Ä–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –≤—ã—Å–æ–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º Vocal</li>
                  <li>–î–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –≤–∞–∂–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Beauty –∏ Power</li>
                  <li>–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ—Å—Ç–∞ —Ñ–∞–Ω-–±–∞–∑—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –≤—ã—Å–æ–∫–æ–π Charisma</li>
                  <li>–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∏–ª—å–Ω—ã–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –¥–∞—Å—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      `;
      
      document.body.appendChild(statsInfoModal);
      const modal = new bootstrap.Modal(statsInfoModal);
      modal.show();
      statsInfoModal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(statsInfoModal);
      });
    });
  }

// --- Sample Data for News and Events ---
const sampleNewsData = [
  {
    title: "New Album 'Cybernetic Symphony' Released!",
    date: "OCT 26, 2024",
    content: "Hatsune Miku's latest album, 'Cybernetic Symphony', is now available worldwide! Featuring 12 new tracks that blend futuristic sounds with her iconic vocal style. Don't miss out on the limited edition physical release with exclusive artwork.",
    imageUrl: "–º–∏–∫—É_–∫–∞—Ä—Ç–∏–Ω–∫–∏/08402f4a15ae284a450e5f5f263cd443.webp",
    buttonText: "Listen Now",
    buttonLink: "#"
  },
  {
    title: "Miku Expo 2025 World Tour Announced",
    date: "OCT 15, 2024",
    content: "Get ready! Miku Expo is hitting the road again in 2025 with a massive world tour. Dates and cities will be announced soon. Expect new songs, stunning visuals, and an unforgettable experience.",
    imageUrl: "–º–∏–∫—É_–∫–∞—Ä—Ç–∏–Ω–∫–∏/a0f5fa7c8929d2572041c1740f285ff7.webp"
  },
  {
    title: "Game Update v1.5: New Tycoon Features!",
    date: "OCT 10, 2024",
    content: "The Hatsune Miku Tycoon Gacha game has been updated to version 1.5! This update includes exciting new features for the Tycoon mode, balance adjustments, and a set of exclusive new cards. Log in now to check it out!",
    buttonText: "Read Patch Notes",
    buttonLink: "#"
  }
];

const sampleEventsData = [
  {
    title: "Magical Mirai 2024",
    dateRange: "SEP 01 - SEP 03, 2024",
    description: "Join us for Magical Mirai 2024! A special in-game event celebrating Miku's annual concert series. Participate in event stages to earn exclusive cards and items.",
    imageUrl: "–º–∏–∫—É_–∫–∞—Ä—Ç–∏–Ω–∫–∏/640b28cf1793694f9251afe6e1a43736.webp",
    progress: 75, // Optional: 0-100
    progressText: "7500/10000 EP",
    buttonText: "Go to Event"
  },
  {
    title: "Spring Melody Gacha Festival",
    dateRange: "NOW - OCT 30, 2024",
    description: "The Spring Melody Gacha is here! Increased chances to get rare Miku cards with floral themes. Special login bonuses available throughout the event.",
    imageUrl: "–º–∏–∫—É_–∫–∞—Ä—Ç–∏–Ω–∫–∏/0361f24ce641bd47ebe323b33d627725.webp",
    buttonText: "Pull Now!"
  },
  {
    title: "Snow Miku 2025 Design Contest",
    dateRange: "Submissions Open: NOV 01 - DEC 15, 2024",
    description: "The annual Snow Miku design contest is starting soon! Submit your creative designs for Snow Miku 2025 and her rabbit Yukine. The winning design will become an official Nendoroid!",
    imageUrl: "–º–∏–∫—É_–∫–∞—Ä—Ç–∏–Ω–∫–∏/2db039bbccdcfe5bcb98d22685295dff.webp",
    buttonText: "Learn More"
  }
];

// --- Rendering Functions for News and Events ---

function renderNews(newsArray, containerId) {
  const container = document.getElementById(containerId);
  if (!container) {
    console.error(`Container with id ${containerId} not found for news.`);
    return;
  }
  // Render only if container is empty to avoid duplication on re-clicking the menu
  if (container.innerHTML.trim() !== "" && container.dataset.rendered === "true") return;

  container.innerHTML = ""; // Clear previous content

  newsArray.forEach(newsItem => {
    const itemBox = document.createElement('div');
    itemBox.className = 'feature-box mb-4';

    let imageHtml = '';
    if (newsItem.imageUrl) {
      imageHtml = `<img src="${newsItem.imageUrl}" alt="${newsItem.title}" class="img-fluid rounded mb-3" style="max-height: 250px; object-fit: cover; width: 100%;">`;
    }

    let buttonHtml = '';
    if (newsItem.buttonText && newsItem.buttonLink) {
      buttonHtml = `<button class="feature-button mt-3" onclick="window.open('${newsItem.buttonLink}', '_blank')">${newsItem.buttonText}</button>`;
    } else if (newsItem.buttonText) {
       buttonHtml = `<button class="feature-button mt-3">${newsItem.buttonText}</button>`;
    }


    itemBox.innerHTML = `
      <h3 class="feature-title">${newsItem.title}</h3>
      <p class="news-date">${newsItem.date}</p>
      ${imageHtml}
      <p>${newsItem.content}</p>
      ${buttonHtml}
    `;
    container.appendChild(itemBox);
  });
  container.dataset.rendered = "true";
}

function renderEvents(eventsArray, containerId) {
  const container = document.getElementById(containerId);
  if (!container) {
    console.error(`Container with id ${containerId} not found for events.`);
    return;
  }
  if (container.innerHTML.trim() !== "" && container.dataset.rendered === "true") return;
  
  container.innerHTML = ""; // Clear previous content

  eventsArray.forEach(eventItem => {
    const itemBox = document.createElement('div');
    itemBox.className = 'feature-box mb-4';

    let imageCellHtml = ''; // Changed variable name for clarity
    if (eventItem.imageUrl) {
      // Add 'event-image-container' class to the div wrapping the image
      imageCellHtml = `<div class="col-md-4 event-image-container"><img src="${eventItem.imageUrl}" alt="${eventItem.title}" class="img-fluid rounded"></div>`;
    }

    let progressHtml = '';
    if (eventItem.progress !== undefined && eventItem.progressText) {
      progressHtml = `
        <div class="progress mb-2" style="height: 20px;">
          <div class="progress-bar bg-success" role="progressbar" style="width: ${eventItem.progress}%;" aria-valuenow="${eventItem.progress}" aria-valuemin="0" aria-valuemax="100">${eventItem.progress}%</div>
        </div>
        <p class="mb-2">Progress: ${eventItem.progressText}</p>
      `;
    }
    
    let buttonHtml = '';
    if (eventItem.buttonText && eventItem.buttonLink) {
        buttonHtml = `<button class="feature-button" onclick="window.open('${eventItem.buttonLink}', '_blank')">${eventItem.buttonText}</button>`;
    } else if (eventItem.buttonText) {
        buttonHtml = `<button class="feature-button">${eventItem.buttonText}</button>`;
    }


    itemBox.innerHTML = `
      <div class="row">
        ${imageCellHtml} 
        <div class="${eventItem.imageUrl ? 'col-md-8' : 'col-md-12'}">
          <h3 class="feature-title">${eventItem.title}</h3>
          <p class="news-date">${eventItem.dateRange}</p>
          <p>${eventItem.description}</p>
          ${progressHtml}
          ${buttonHtml}
        </div>
      </div>
    `;
    container.appendChild(itemBox);
  });
  container.dataset.rendered = "true";
}


// --- End Rendering Functions ---

// --- Basic Unit Tests ---
function assertEqual(actual, expected, message) {
  if (actual === expected) {
    console.log(`PASS: ${message}`);
    return true;
  } else {
    console.error(`FAIL: ${message}. Expected "${expected}", but got "${actual}".`);
    return false;
  }
}

function assertElementPresent(selector, message) {
  if (document.querySelector(selector)) {
    console.log(`PASS: ${message}`);
    return true;
  } else {
    console.error(`FAIL: ${message}. Element "${selector}" not found.`);
    return false;
  }
}

function assertElementTextContains(selector, text, message) {
  const element = document.querySelector(selector);
  if (element && element.textContent.includes(text)) {
    console.log(`PASS: ${message}`);
    return true;
  } else if (!element) {
    console.error(`FAIL: ${message}. Element "${selector}" not found.`);
    return false;
  } else {
    console.error(`FAIL: ${message}. Element "${selector}" does not contain text "${text}". Actual: "${element.textContent}".`);
    return false;
  }
}

function setupTestContainer(id) {
  let container = document.getElementById(id);
  if (container) {
    container.innerHTML = ''; // Clear if exists
  } else {
    container = document.createElement('div');
    container.id = id;
    document.body.appendChild(container); // Append to body for tests to run
  }
  container.dataset.rendered = "false"; // Reset rendered state
  return container;
}

function cleanupTestContainer(id) {
  const container = document.getElementById(id);
  if (container) {
    container.remove();
  }
}

function testRenderNews() {
  console.log("--- Testing renderNews ---");
  const containerId = 'testNewsContainer';
  let passCount = 0;
  let failCount = 0;

  // Test 1: Empty array
  setupTestContainer(containerId);
  renderNews([], containerId);
  const newsContainer = document.getElementById(containerId);
  if (assertEqual(newsContainer.children.length, 0, "Test 1: Renders no items for empty array")) {
    passCount++;
  } else {
    failCount++;
  }
  cleanupTestContainer(containerId);

  // Test 2: With sample data
  setupTestContainer(containerId);
  const sampleNews = [
    { title: "News 1", date: "Date 1", content: "Content 1", imageUrl: "img1.jpg", buttonText: "Read More" },
    { title: "News 2", date: "Date 2", content: "Content 2" }
  ];
  renderNews(sampleNews, containerId);
  if (assertEqual(newsContainer.children.length, 2, "Test 2.1: Renders correct number of news items")) {
    passCount++;
  } else {
    failCount++;
  }
  if (assertElementTextContains(`#${containerId} .feature-box:first-child .feature-title`, "News 1", "Test 2.2: Renders correct title for first item")) {
    passCount++;
  } else {
    failCount++;
  }
  if (assertElementTextContains(`#${containerId} .feature-box:first-child .news-date`, "Date 1", "Test 2.3: Renders correct date for first item")) {
    passCount++;
  } else {
    failCount++;
  }
  if (assertElementPresent(`#${containerId} .feature-box:first-child img[src="img1.jpg"]`, "Test 2.4: Renders image for first item")) {
    passCount++;
  } else {
    failCount++;
  }
  if (assertElementPresent(`#${containerId} .feature-box:first-child button`, "Test 2.5: Renders button for first item")) {
    passCount++;
  } else {
    failCount++;
  }
  if (assertElementPresent(`#${containerId} .feature-box:last-child .feature-title`, "Test 2.6: Renders title for second item")) {
     passCount++;
  } else {
    failCount++;
  }
  // Check that the second item does *not* have an image or button if not specified
  const secondItemImg = newsContainer.querySelector('.feature-box:last-child img');
  if (assertEqual(secondItemImg, null, "Test 2.7: Second item does not have an image")) {
    passCount++;
  } else {
    failCount++;
  }
  const secondItemButton = newsContainer.querySelector('.feature-box:last-child button');
  if (assertEqual(secondItemButton, null, "Test 2.8: Second item does not have a button")) {
    passCount++;
  } else {
    failCount++;
  }

  cleanupTestContainer(containerId);
  console.log(`renderNews Tests: ${passCount} passed, ${failCount} failed.`);
  return failCount === 0;
}

function testRenderEvents() {
  console.log("--- Testing renderEvents ---");
  const containerId = 'testEventsContainer';
  let passCount = 0;
  let failCount = 0;

  // Test 1: Empty array
  setupTestContainer(containerId);
  renderEvents([], containerId);
  const eventsContainer = document.getElementById(containerId);
  if (assertEqual(eventsContainer.children.length, 0, "Test 1: Renders no items for empty array")) {
    passCount++;
  } else {
    failCount++;
  }
  cleanupTestContainer(containerId);

  // Test 2: With sample data
  setupTestContainer(containerId);
  const sampleEvents = [
    { title: "Event 1", dateRange: "Dates 1", description: "Desc 1", imageUrl: "event1.jpg", progress: 50, progressText: "50/100", buttonText: "Join" },
    { title: "Event 2", dateRange: "Dates 2", description: "Desc 2" }
  ];
  renderEvents(sampleEvents, containerId);
  if (assertEqual(eventsContainer.children.length, 2, "Test 2.1: Renders correct number of event items")) {
    passCount++;
  } else {
    failCount++;
  }
  if (assertElementTextContains(`#${containerId} .feature-box:first-child .feature-title`, "Event 1", "Test 2.2: Renders correct title for first item")) {
    passCount++;
  } else {
    failCount++;
  }
  if (assertElementTextContains(`#${containerId} .feature-box:first-child .news-date`, "Dates 1", "Test 2.3: Renders correct date range for first item")) {
    passCount++;
  } else {
    failCount++;
  }
  if (assertElementPresent(`#${containerId} .feature-box:first-child .event-image-container img[src="event1.jpg"]`, "Test 2.4: Renders image for first item")) {
    passCount++;
  } else {
    failCount++;
  }
  if (assertElementPresent(`#${containerId} .feature-box:first-child .progress`, "Test 2.5: Renders progress bar for first item")) {
    passCount++;
  } else {
    failCount++;
  }
  if (assertElementPresent(`#${containerId} .feature-box:first-child button`, "Test 2.6: Renders button for first item")) {
    passCount++;
  } else {
    failCount++;
  }
  // Check that the second item does *not* have an image, progress or button if not specified
  const secondItemImgContainer = eventsContainer.querySelector('.feature-box:last-child .event-image-container');
  if (assertEqual(secondItemImgContainer, null, "Test 2.7: Second item does not have an image container")) {
      passCount++;
  } else {
      failCount++;
  }
  const secondItemProgress = eventsContainer.querySelector('.feature-box:last-child .progress');
  if (assertEqual(secondItemProgress, null, "Test 2.8: Second item does not have a progress bar")) {
      passCount++;
  } else {
      failCount++;
  }
  const secondItemButton = eventsContainer.querySelector('.feature-box:last-child button');
  if (assertEqual(secondItemButton, null, "Test 2.9: Second item does not have a button")) {
      passCount++;
  } else {
      failCount++;
  }


  cleanupTestContainer(containerId);
  console.log(`renderEvents Tests: ${passCount} passed, ${failCount} failed.`);
  return failCount === 0;
}

function runAllTests() {
  console.log("===== Running All Unit Tests =====");
  let overallSuccess = true;
  
  if (!testRenderNews()) {
    overallSuccess = false;
  }
  if (!testRenderEvents()) {
    overallSuccess = false;
  }

  if (overallSuccess) {
    console.log("===== All tests passed! =====");
  } else {
    console.error("===== Some tests failed. Please check logs. =====");
  }
}

// Automatically run tests when the script is loaded
// Ensure DOM is ready for container manipulation if tests run immediately
document.addEventListener('DOMContentLoaded', function() {
    runAllTests();
});
// --- End Basic Unit Tests ---

const statsInfoModal = document.createElement('div');
    statsInfoModal.className = 'modal fade';
    statsInfoModal.id = 'statsInfoModal';
    statsInfoModal.innerHTML = `
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:</strong></p>
            <ul class="stats-explanation">
              <li><strong>P (Power/–°–∏–ª–∞)</strong>: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –∏ –≤–ª–∏—è–µ—Ç –Ω–∞ —É—Å–ø–µ—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π. –ß–µ–º –≤—ã—à–µ —Å–∏–ª–∞, —Ç–µ–º –±–æ–ª—å—à–µ –≤–ª–∏—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É.</li>
              <li><strong>B (Beauty/–ö—Ä–∞—Å–æ—Ç–∞)</strong>: –í–ª–∏—è–µ—Ç –Ω–∞ –≤–Ω–µ—à–Ω—é—é –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é. –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å –≤—ã—Å–æ–∫–æ–π –∫—Ä–∞—Å–æ—Ç–æ–π —Å–æ–∑–¥–∞—é—Ç –±–æ–ª–µ–µ –∑—Ä–µ–ª–∏—â–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è.</li>
              <li><strong>C (Charisma/–•–∞—Ä–∏–∑–º–∞)</strong>: –ù–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–Ω–∞—Ç–æ–≤ –∏ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å –≤—ã—Å–æ–∫–æ–π —Ö–∞—Ä–∏–∑–º–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç –±–æ–ª—å—à–µ —Ñ–∞–Ω–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π.</li>
              <li><strong>V (Vocal/–í–æ–∫–∞–ª)</strong>: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –ø–µ—Å–µ–Ω –∏ –∏—Ö –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å. –•–æ—Ä–æ—à–∏–π –≤–æ–∫–∞–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —É—Å–ø–µ—à–Ω—ã–µ —Ç—Ä–µ–∫–∏.</li>
            </ul>
            <div class="mt-3">
              <p><strong>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</strong></p>
              <ul>
                <li>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–æ—Ä–æ—à–∏—Ö –ø–µ—Å–µ–Ω –≤—ã–±–∏—Ä–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –≤—ã—Å–æ–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º Vocal</li>
                <li>–î–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –≤–∞–∂–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Beauty –∏ Power</li>
                <li>–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ—Å—Ç–∞ —Ñ–∞–Ω-–±–∞–∑—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –≤—ã—Å–æ–∫–æ–π Charisma</li>
                <li>–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∏–ª—å–Ω—ã–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –¥–∞—Å—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM
    document.body.appendChild(statsInfoModal);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = new bootstrap.Modal(statsInfoModal);
    modal.show();
    
    // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
    statsInfoModal.addEventListener('hidden.bs.modal', function() {
      document.body.removeChild(statsInfoModal);
    });
  });